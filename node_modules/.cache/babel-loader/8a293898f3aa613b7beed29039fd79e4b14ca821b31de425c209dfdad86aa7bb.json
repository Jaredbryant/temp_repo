{"ast":null,"code":"var _jsxFileName = \"/Users/mannyfowler/Desktop/Hackathon/HackerHornets/CLASSROOM-CALENDAR/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useGoogleLogin } from \"@react-oauth/google\";\nimport axios from \"axios\";\nimport ClassroomCalendar from \"./ClassroomCalendar\";\nimport Gpt from \"./Gpt\";\nimport StudyMaterial from \"./StudyMaterial\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [token, setToken] = useState(null); // OAuth token\n  const [events, setEvents] = useState([]);\n  const [grades, setGrades] = useState({}); // Store grades for courses\n  const [gradesArray, setGradesArray] = useState([]); // 2D array of assignments and grades\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    if (token) {\n      fetchClassroomData(token);\n    }\n  }, [token]);\n\n  // Fetch Classroom Data\n  const fetchClassroomData = async token => {\n    setIsLoading(true);\n    try {\n      console.log(\"Fetching classroom data with token:\", token);\n\n      // Fetch courses\n      const coursesResponse = await axios.get(\"https://classroom.googleapis.com/v1/courses\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log(\"Fetched Courses:\", coursesResponse.data);\n      const courses = coursesResponse.data.courses || [];\n      if (courses.length === 0) {\n        console.warn(\"No courses found for the logged-in account.\");\n        setEvents([]);\n        setGrades({});\n        setGradesArray([]);\n        setIsLoading(false);\n        return;\n      }\n      const allEvents = [];\n      const gradesMap = {};\n      const tempGradesArray = []; // Temporary array for assignments and grades\n\n      // Fetch coursework and grades\n      for (const course of courses) {\n        try {\n          const courseworkResponse = await axios.get(`https://classroom.googleapis.com/v1/courses/${course.id}/courseWork`, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          const coursework = courseworkResponse.data.courseWork || [];\n          for (const assignment of coursework) {\n            const {\n              dueDate,\n              dueTime,\n              title,\n              id: assignmentId\n            } = assignment;\n\n            // Fetch student submission for the assignment\n            const submissionResponse = await axios.get(`https://classroom.googleapis.com/v1/courses/${course.id}/courseWork/${assignmentId}/studentSubmissions`, {\n              headers: {\n                Authorization: `Bearer ${token}`\n              }\n            });\n            const submissions = submissionResponse.data.studentSubmissions || [];\n            submissions.forEach(submission => {\n              const grade = (submission === null || submission === void 0 ? void 0 : submission.assignedGrade) || \"Not Graded\";\n              const studentId = (submission === null || submission === void 0 ? void 0 : submission.userId) || \"Unknown Student\";\n              tempGradesArray.push([title, studentId, grade]);\n            });\n\n            // Add assignment event\n            if (dueDate) {\n              const dueDateTime = new Date(dueDate.year, dueDate.month - 1, dueDate.day, (dueTime === null || dueTime === void 0 ? void 0 : dueTime.hours) || 23, (dueTime === null || dueTime === void 0 ? void 0 : dueTime.minutes) || 59);\n\n              // Determine color\n              let color = \"gray\"; // Default: ungraded\n              if (dueDateTime < new Date() && submissions.every(s => s.state !== \"TURNED_IN\")) {\n                color = \"red\"; // Past due and not submitted\n              } else if (submissions.some(s => s.assignedGrade !== undefined)) {\n                color = \"green\"; // Graded\n              } else if (submissions.some(s => s.state === \"TURNED_IN\")) {\n                color = \"blue\"; // Submitted but not graded\n              }\n              allEvents.push({\n                title: `${title}`,\n                start: dueDateTime,\n                end: dueDateTime,\n                color\n              });\n            } else {\n              allEvents.push({\n                title: `${title}`,\n                start: null,\n                end: null,\n                color: \"gray\"\n              });\n            }\n          }\n\n          // Store course-level grade information\n          gradesMap[course.id] = {\n            courseName: course.name,\n            grade: course.grade || \"N/A\" // Course grade if available\n          };\n        } catch (error) {\n          console.error(`Error fetching assignments for course ID: ${course.id}`, error);\n        }\n      }\n\n      // Update state with events and grades\n      setEvents(allEvents);\n      setGrades(gradesMap);\n      setGradesArray(tempGradesArray);\n      console.log(\"Final Events:\", allEvents);\n      console.log(\"Grades by Course:\", gradesMap);\n      console.log(\"2D Grades Array:\", tempGradesArray);\n    } catch (error) {\n      console.error(\"Error fetching classroom data:\", error.response || error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Google Login\n  const login = useGoogleLogin({\n    onSuccess: response => {\n      console.log(\"Login Successful:\", response);\n      setToken(response.access_token);\n    },\n    onError: error => console.error(\"Login failed:\", error),\n    scope: \"https://www.googleapis.com/auth/classroom.courses.readonly https://www.googleapis.com/auth/classroom.coursework.me.readonly https://www.googleapis.com/auth/classroom.student-submissions.me.readonly\"\n  });\n\n  // Logout\n  const logout = () => {\n    console.log(\"Logging out...\");\n    setToken(null);\n    setEvents([]);\n    setGrades({});\n    setGradesArray([]);\n  };\n\n  // Circle Progress Bar\n  const CircleProgressBar = ({\n    completedCount,\n    overdueCount\n  }) => {\n    const total = completedCount + overdueCount;\n    const completedPercentage = total ? completedCount / total * 100 : 0;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"center\",\n        margin: \"20px 0\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        width: \"120\",\n        height: \"120\",\n        viewBox: \"0 0 120 120\",\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"60\",\n          cy: \"60\",\n          r: \"50\",\n          fill: \"none\",\n          stroke: \"#e0e0e0\",\n          strokeWidth: \"10\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"60\",\n          cy: \"60\",\n          r: \"50\",\n          fill: \"none\",\n          stroke: \"green\",\n          strokeWidth: \"10\",\n          strokeDasharray: `${completedPercentage} ${100 - completedPercentage}`,\n          strokeDashoffset: \"25\",\n          transform: \"rotate(-90 60 60)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: \"-90px\",\n          fontWeight: \"bold\"\n        },\n        children: [Math.round(completedPercentage), \"% Complete\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Completed: \", completedCount, \" | Overdue: \", overdueCount, \" | Total: \", total]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Classroom Calendar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), !token ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: login,\n        children: \"Login with Google\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this)\n    }, void 0, false) : isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: logout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Assignments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CircleProgressBar, {\n        completedCount: events.filter(event => event.color === \"green\").length,\n        overdueCount: events.filter(event => event.color === \"red\").length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Grades Overview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: Object.values(grades).map((grade, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: grade.courseName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 17\n          }, this), \": \", grade.grade]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ClassroomCalendar, {\n        events: events\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Gpt, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"2D Array of Assignments and Grades\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        style: {\n          background: \"#f4f4f4\",\n          padding: \"10px\",\n          borderRadius: \"5px\",\n          overflowX: \"auto\"\n        },\n        children: JSON.stringify(gradesArray, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(StudyMaterial, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"3kGV5FxL9ee9AuUbi/x+aOtgARE=\", false, function () {\n  return [useGoogleLogin];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useGoogleLogin","axios","ClassroomCalendar","Gpt","StudyMaterial","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","token","setToken","events","setEvents","grades","setGrades","gradesArray","setGradesArray","isLoading","setIsLoading","fetchClassroomData","console","log","coursesResponse","get","headers","Authorization","data","courses","length","warn","allEvents","gradesMap","tempGradesArray","course","courseworkResponse","id","coursework","courseWork","assignment","dueDate","dueTime","title","assignmentId","submissionResponse","submissions","studentSubmissions","forEach","submission","grade","assignedGrade","studentId","userId","push","dueDateTime","Date","year","month","day","hours","minutes","color","every","s","state","some","undefined","start","end","courseName","name","error","response","login","onSuccess","access_token","onError","scope","logout","CircleProgressBar","completedCount","overdueCount","total","completedPercentage","style","textAlign","margin","children","width","height","viewBox","cx","cy","r","fill","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","strokeDasharray","strokeDashoffset","transform","marginTop","fontWeight","Math","round","onClick","filter","event","Object","values","map","index","background","padding","borderRadius","overflowX","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/mannyfowler/Desktop/Hackathon/HackerHornets/CLASSROOM-CALENDAR/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useGoogleLogin } from \"@react-oauth/google\";\nimport axios from \"axios\";\nimport ClassroomCalendar from \"./ClassroomCalendar\";\nimport Gpt from \"./Gpt\";\nimport StudyMaterial from \"./StudyMaterial\"\n\nconst App = () => {\n  const [token, setToken] = useState(null); // OAuth token\n  const [events, setEvents] = useState([]);\n  const [grades, setGrades] = useState({}); // Store grades for courses\n  const [gradesArray, setGradesArray] = useState([]); // 2D array of assignments and grades\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (token) {\n      fetchClassroomData(token);\n    }\n  }, [token]);\n\n  // Fetch Classroom Data\n  const fetchClassroomData = async (token) => {\n    setIsLoading(true);\n    try {\n      console.log(\"Fetching classroom data with token:\", token);\n\n      // Fetch courses\n      const coursesResponse = await axios.get(\n        \"https://classroom.googleapis.com/v1/courses\",\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n      console.log(\"Fetched Courses:\", coursesResponse.data);\n\n      const courses = coursesResponse.data.courses || [];\n      if (courses.length === 0) {\n        console.warn(\"No courses found for the logged-in account.\");\n        setEvents([]);\n        setGrades({});\n        setGradesArray([]);\n        setIsLoading(false);\n        return;\n      }\n\n      const allEvents = [];\n      const gradesMap = {};\n      const tempGradesArray = []; // Temporary array for assignments and grades\n\n      // Fetch coursework and grades\n      for (const course of courses) {\n        try {\n          const courseworkResponse = await axios.get(\n            `https://classroom.googleapis.com/v1/courses/${course.id}/courseWork`,\n            {\n              headers: { Authorization: `Bearer ${token}` },\n            }\n          );\n\n          const coursework = courseworkResponse.data.courseWork || [];\n          for (const assignment of coursework) {\n            const { dueDate, dueTime, title, id: assignmentId } = assignment;\n\n            // Fetch student submission for the assignment\n            const submissionResponse = await axios.get(\n              `https://classroom.googleapis.com/v1/courses/${course.id}/courseWork/${assignmentId}/studentSubmissions`,\n              {\n                headers: { Authorization: `Bearer ${token}` },\n              }\n            );\n\n            const submissions = submissionResponse.data.studentSubmissions || [];\n            submissions.forEach((submission) => {\n              const grade = submission?.assignedGrade || \"Not Graded\";\n              const studentId = submission?.userId || \"Unknown Student\";\n              tempGradesArray.push([title, studentId, grade]);\n            });\n\n            // Add assignment event\n            if (dueDate) {\n              const dueDateTime = new Date(\n                dueDate.year,\n                dueDate.month - 1,\n                dueDate.day,\n                dueTime?.hours || 23,\n                dueTime?.minutes || 59\n              );\n\n              // Determine color\n              let color = \"gray\"; // Default: ungraded\n              if (dueDateTime < new Date() && submissions.every(s => s.state !== \"TURNED_IN\")) {\n                color = \"red\"; // Past due and not submitted\n              } else if (submissions.some(s => s.assignedGrade !== undefined)) {\n                color = \"green\"; // Graded\n              } else if (submissions.some(s => s.state === \"TURNED_IN\")) {\n                color = \"blue\"; // Submitted but not graded\n              }\n\n              allEvents.push({\n                title: `${title}`,\n                start: dueDateTime,\n                end: dueDateTime,\n                color,\n              });\n            } else {\n              allEvents.push({\n                title: `${title}`,\n                start: null,\n                end: null,\n                color: \"gray\",\n              });\n            }\n          }\n\n          // Store course-level grade information\n          gradesMap[course.id] = {\n            courseName: course.name,\n            grade: course.grade || \"N/A\", // Course grade if available\n          };\n        } catch (error) {\n          console.error(`Error fetching assignments for course ID: ${course.id}`, error);\n        }\n      }\n\n      // Update state with events and grades\n      setEvents(allEvents);\n      setGrades(gradesMap);\n      setGradesArray(tempGradesArray);\n      console.log(\"Final Events:\", allEvents);\n      console.log(\"Grades by Course:\", gradesMap);\n      console.log(\"2D Grades Array:\", tempGradesArray);\n    } catch (error) {\n      console.error(\"Error fetching classroom data:\", error.response || error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Google Login\n  const login = useGoogleLogin({\n    onSuccess: (response) => {\n      console.log(\"Login Successful:\", response);\n      setToken(response.access_token);\n    },\n    onError: (error) => console.error(\"Login failed:\", error),\n    scope: \"https://www.googleapis.com/auth/classroom.courses.readonly https://www.googleapis.com/auth/classroom.coursework.me.readonly https://www.googleapis.com/auth/classroom.student-submissions.me.readonly\",\n  });\n\n  // Logout\n  const logout = () => {\n    console.log(\"Logging out...\");\n    setToken(null);\n    setEvents([]);\n    setGrades({});\n    setGradesArray([]);\n  };\n\n  // Circle Progress Bar\n  const CircleProgressBar = ({ completedCount, overdueCount }) => {\n    const total = completedCount + overdueCount;\n    const completedPercentage = total ? (completedCount / total) * 100 : 0;\n\n    return (\n      <div style={{ textAlign: \"center\", margin: \"20px 0\" }}>\n        <svg width=\"120\" height=\"120\" viewBox=\"0 0 120 120\">\n          <circle\n            cx=\"60\"\n            cy=\"60\"\n            r=\"50\"\n            fill=\"none\"\n            stroke=\"#e0e0e0\"\n            strokeWidth=\"10\"\n          />\n          <circle\n            cx=\"60\"\n            cy=\"60\"\n            r=\"50\"\n            fill=\"none\"\n            stroke=\"green\"\n            strokeWidth=\"10\"\n            strokeDasharray={`${completedPercentage} ${100 - completedPercentage}`}\n            strokeDashoffset=\"25\"\n            transform=\"rotate(-90 60 60)\"\n          />\n        </svg>\n        <div style={{ marginTop: \"-90px\", fontWeight: \"bold\" }}>\n          {Math.round(completedPercentage)}% Complete\n        </div>\n        <p>\n          Completed: {completedCount} | Overdue: {overdueCount} | Total: {total}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <h1>Classroom Calendar</h1>\n      {!token ? (\n        <>\n          <button onClick={login}>Login with Google</button>\n        </>\n      ) : isLoading ? (\n        <p>Loading data...</p>\n      ) : (\n        <>\n          <button onClick={logout}>Logout</button>\n          <h2>Your Assignments</h2>\n          <CircleProgressBar\n            completedCount={\n              events.filter((event) => event.color === \"green\").length\n            }\n            overdueCount={\n              events.filter((event) => event.color === \"red\").length\n            }\n          />\n          <h3>Grades Overview</h3>\n          <ul>\n            {Object.values(grades).map((grade, index) => (\n              <li key={index}>\n                <strong>{grade.courseName}</strong>: {grade.grade}\n              </li>\n            ))}\n          </ul>\n          <ClassroomCalendar events={events} />\n          <Gpt/>\n          <h3>2D Array of Assignments and Grades</h3>\n          <pre\n            style={{\n              background: \"#f4f4f4\",\n              padding: \"10px\",\n              borderRadius: \"5px\",\n              overflowX: \"auto\",\n            }}\n          >\n            {JSON.stringify(gradesArray, null, 2)}\n          </pre>\n          <StudyMaterial/>\n        </>\n      )}\n    </div>\n    \n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}